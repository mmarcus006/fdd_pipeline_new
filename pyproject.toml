[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["tasks", "models", "utils", "flows", "config.py"]

[project]
name = "fdd-pipeline"
version = "0.1.0"
description = "Automated FDD document processing pipeline"
authors = [
    {name = "FDD Pipeline Team", email = "team@fdd-pipeline.com"},
]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Workflow orchestration
    "prefect",
    "PyPDF2",
    "click",
    "tqdm",



    
    # Web scraping & automation
    "playwright>=1.40.0",
    "beautifulsoup4>=4.12.0",
    "httpx>=0.25.0",
    
    # Data processing & validation
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "pandas>=2.1.0",
    
    # Database & storage
    "supabase>=2.3.0",
    "sqlalchemy>=2.0.0",
    "google-api-python-client>=2.100.0",
    "google-auth>=2.23.0",
    "google-auth-oauthlib>=1.1.0",
    "google-auth-httplib2>=0.2.0",
    
    # AI/ML stack
    "instructor>=1.2.0",
    "google-genai",
    "openai>=1.6.0",
    "ollama>=0.1.0",
    "sentence-transformers>=2.2.0",
    "mistralai",
    
    # Document processing
    "pypdf2>=3.0.0",
    # Note: magic-pdf installation is complex, install separately if needed
    # "magic-pdf[full]>=0.7.0",  # MinerU local with GPU support
    # "torch>=2.0.0",  # Required for MinerU GPU processing
    
    # API framework
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "jinja2>=3.1.0",
    "pyyaml>=6.0.0",
    "structlog>=23.2.0",
    "python-json-logger>=2.0.0",
]

[project.optional-dependencies]
dev = [
    # Code quality
    "black>=23.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    
    # Git hooks
    "pre-commit>=3.5.0",
    
    # Type stubs
    "types-requests",
    "types-pyyaml",
    "pandas-stubs",
]

[project.urls]
Homepage = "https://github.com/yourorg/fdd-pipeline"
Documentation = "https://github.com/yourorg/fdd-pipeline/docs"
Repository = "https://github.com/yourorg/fdd-pipeline.git"
Issues = "https://github.com/yourorg/fdd-pipeline/issues"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "supabase.*",
    "ollama.*",
    "instructor.*",
    "sentence_transformers.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    ".env",
    "env",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".tox",
    ".mypy_cache",
    ".pytest_cache",
    # Exclude sympy files that cause recursion issues
    "*/sympy/polys/numberfields/resolvent_lookup.py",
]
max-line-length = 88
max-complexity = 10